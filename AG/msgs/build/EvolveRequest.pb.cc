// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EvolveRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EvolveRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace evolve_robots_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* EvolveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolveRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EvolveRequest_2eproto() {
  protobuf_AddDesc_EvolveRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EvolveRequest.proto");
  GOOGLE_CHECK(file != NULL);
  EvolveRequest_descriptor_ = file->message_type(0);
  static const int EvolveRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, road_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, speeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, carrot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, index_),
  };
  EvolveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvolveRequest_descriptor_,
      EvolveRequest::default_instance_,
      EvolveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvolveRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EvolveRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvolveRequest_descriptor_, &EvolveRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EvolveRequest_2eproto() {
  delete EvolveRequest::default_instance_;
  delete EvolveRequest_reflection_;
}

void protobuf_AddDesc_EvolveRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023EvolveRequest.proto\022\027evolve_robots_msg"
    "s.msgs\"L\n\rEvolveRequest\022\014\n\004road\030\001 \003(\005\022\016\n"
    "\006speeds\030\002 \003(\001\022\016\n\006carrot\030\003 \002(\001\022\r\n\005index\030\004"
    " \002(\005", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EvolveRequest.proto", &protobuf_RegisterTypes);
  EvolveRequest::default_instance_ = new EvolveRequest();
  EvolveRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EvolveRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EvolveRequest_2eproto {
  StaticDescriptorInitializer_EvolveRequest_2eproto() {
    protobuf_AddDesc_EvolveRequest_2eproto();
  }
} static_descriptor_initializer_EvolveRequest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EvolveRequest::kRoadFieldNumber;
const int EvolveRequest::kSpeedsFieldNumber;
const int EvolveRequest::kCarrotFieldNumber;
const int EvolveRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

EvolveRequest::EvolveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:evolve_robots_msgs.msgs.EvolveRequest)
}

void EvolveRequest::InitAsDefaultInstance() {
}

EvolveRequest::EvolveRequest(const EvolveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:evolve_robots_msgs.msgs.EvolveRequest)
}

void EvolveRequest::SharedCtor() {
  _cached_size_ = 0;
  carrot_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvolveRequest::~EvolveRequest() {
  // @@protoc_insertion_point(destructor:evolve_robots_msgs.msgs.EvolveRequest)
  SharedDtor();
}

void EvolveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolveRequest_descriptor_;
}

const EvolveRequest& EvolveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EvolveRequest_2eproto();
  return *default_instance_;
}

EvolveRequest* EvolveRequest::default_instance_ = NULL;

EvolveRequest* EvolveRequest::New() const {
  return new EvolveRequest;
}

void EvolveRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EvolveRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(carrot_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  road_.Clear();
  speeds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:evolve_robots_msgs.msgs.EvolveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 road = 1;
      case 1: {
        if (tag == 8) {
         parse_road:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_road())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_road())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_road;
        if (input->ExpectTag(17)) goto parse_speeds;
        break;
      }

      // repeated double speeds = 2;
      case 2: {
        if (tag == 17) {
         parse_speeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_speeds())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_speeds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_speeds;
        if (input->ExpectTag(25)) goto parse_carrot;
        break;
      }

      // required double carrot = 3;
      case 3: {
        if (tag == 25) {
         parse_carrot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrot_)));
          set_has_carrot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:evolve_robots_msgs.msgs.EvolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:evolve_robots_msgs.msgs.EvolveRequest)
  return false;
#undef DO_
}

void EvolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:evolve_robots_msgs.msgs.EvolveRequest)
  // repeated int32 road = 1;
  for (int i = 0; i < this->road_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->road(i), output);
  }

  // repeated double speeds = 2;
  for (int i = 0; i < this->speeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->speeds(i), output);
  }

  // required double carrot = 3;
  if (has_carrot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->carrot(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:evolve_robots_msgs.msgs.EvolveRequest)
}

::google::protobuf::uint8* EvolveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:evolve_robots_msgs.msgs.EvolveRequest)
  // repeated int32 road = 1;
  for (int i = 0; i < this->road_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->road(i), target);
  }

  // repeated double speeds = 2;
  for (int i = 0; i < this->speeds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->speeds(i), target);
  }

  // required double carrot = 3;
  if (has_carrot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->carrot(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:evolve_robots_msgs.msgs.EvolveRequest)
  return target;
}

int EvolveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required double carrot = 3;
    if (has_carrot()) {
      total_size += 1 + 8;
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated int32 road = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->road_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->road(i));
    }
    total_size += 1 * this->road_size() + data_size;
  }

  // repeated double speeds = 2;
  {
    int data_size = 0;
    data_size = 8 * this->speeds_size();
    total_size += 1 * this->speeds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvolveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvolveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvolveRequest::MergeFrom(const EvolveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  road_.MergeFrom(from.road_);
  speeds_.MergeFrom(from.speeds_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_carrot()) {
      set_carrot(from.carrot());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolveRequest::CopyFrom(const EvolveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void EvolveRequest::Swap(EvolveRequest* other) {
  if (other != this) {
    road_.Swap(&other->road_);
    speeds_.Swap(&other->speeds_);
    std::swap(carrot_, other->carrot_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvolveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolveRequest_descriptor_;
  metadata.reflection = EvolveRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace evolve_robots_msgs

// @@protoc_insertion_point(global_scope)
